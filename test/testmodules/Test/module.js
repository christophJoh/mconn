// Generated by CoffeeScript 1.9.1
(function() {
  var Module, Q, Test,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Q = require("q");

  Module = require("../../../bin/classes/Module");

  Test = (function(superClass) {
    extend(Test, superClass);

    Test.prototype.timeout = 10000;

    function Test() {
      Test.__super__.constructor.call(this, "Test");
    }

    Test.prototype.init = function(options, moduleRouter, folder) {
      var deferred;
      Q = require("q");
      deferred = Q.defer();
      Test.__super__.init.call(this, options, moduleRouter, folder).then(function() {
        return deferred.resolve();
      });
      return deferred.promise;
    };

    Test.prototype.worker = function(taskData, callback) {
      this.logger.info("Starting worker for task " + taskData.getData().taskId + "_" + taskData.getData().taskStatus + " state: " + taskData.state);
      return Test.__super__.worker.call(this, taskData, callback).then((function(_this) {
        return function(allreadyDoneState) {
          if (allreadyDoneState) {
            return _this.allreadyDone(taskData, callback);
          } else {
            return Module.loadPresetForModule(taskData.getData().appId, _this.name).then(function(modulePreset) {
              if (!modulePreset) {
                return _this.noPreset(taskData, callback, "Preset could not be found for app " + (taskData.getData().appId));
              } else {
                return _this.doWork(taskData, modulePreset, callback);
              }
            })["catch"](function(error) {
              _this.logger.error(("Error starting worker for " + _this.name + " Module: ") + error.toString() + ", " + error.stack);
              return _this.failed(taskData, callback);
            });
          }
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          return _this.logger.error(error);
        };
      })(this));
    };

    Test.prototype.doWork = function(taskData, modulePreset, callback) {
      this.logger.debug("INFO", "Processing task");
      switch (taskData.getData().taskStatus) {
        case "TASK_RUNNING":
          return this.on_TASK_RUNNING(taskData, modulePreset, callback);
        case "TASK_FAILED":
          return this.on_TASK_FAILED(taskData, modulePreset, callback);
        case "TASK_FINISHED":
          return this.on_TASK_FINISHED(taskData, modulePreset, callback);
        case "TASK_KILLED":
          return this.on_TASK_KILLED(taskData, modulePreset, callback);
      }
    };

    Test.prototype.on_TASK_RUNNING = function(taskData, modulePreset, callback) {
      var delay;
      delay = process.env.MCONN_MODULE_TEST_DELAY != null ? process.env.MCONN_MODULE_TEST_DELAY : 250;
      return Q.delay(delay).then((function(_this) {
        return function() {
          var customData, path;
          path = taskData.getData().taskId;
          customData = "test";
          return _this.addToZKInventory(path, customData, taskData).then(function() {
            _this.logger.info(modulePreset.options.actions.add + " " + taskData.getData().taskId);
            _this.success(taskData, callback);
            return _this.updateInventoryOnGui();
          })["catch"](function(error) {
            return _this.logger.error(error);
          });
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          return _this.logger.error(error);
        };
      })(this));
    };

    Test.prototype.on_TASK_FAILED = function(taskData, modulePreset, callback) {
      var delay;
      delay = process.env.MCONN_MODULE_TEST_DELAY != null ? process.env.MCONN_MODULE_TEST_DELAY : 250;
      return Q.delay(delay).then((function(_this) {
        return function() {
          var path;
          path = taskData.getData().taskId;
          return _this.removeFromZKInventory(path).then(function() {
            _this.logger.info(modulePreset.options.actions.remove + " " + taskData.getData().taskId);
            _this.success(taskData, callback);
            return _this.updateInventoryOnGui();
          })["catch"](function(error) {
            return _this.failed(taskData, callback, error);
          });
        };
      })(this));
    };

    Test.prototype.on_TASK_KILLED = function(taskData, modulePreset, callback) {
      return this.on_TASK_FAILED(taskData, modulePreset, callback);
    };

    Test.prototype.on_TASK_FINISHED = function(taskData, modulePreset, callback) {
      return this.on_TASK_FAILED(taskData, modulePreset, callback);
    };

    Test.prototype.cleanUpInventory = function(result) {
      var deferred;
      this.logger.debug("INFO", "Starting inventory cleanup");
      deferred = Q.defer();
      deferred.resolve();
      return deferred.promise;
    };

    return Test;

  })(Module);

  module.exports = Test;

}).call(this);
